using UnityEngine;
using UnityEditor;
using System.IO;
using System.Text;
using System.Linq;

public class TagEnumGenerator : AssetPostprocessor
{
    private const string ENUM_FILE_PATH = "Assets/Scripts/Generated/UnityTags.cs";
    private const string TAG_MANAGER = "TagManager.asset";

    private static void OnPostprocessAllAssets(string[] importedAssets, string[] deletedAssets, string[] movedAssets, string[] movedFromAssetPaths)
    {
        if (importedAssets.Any(path => path.Contains(TAG_MANAGER)))
        {
            GenerateTagEnum();
        }
    }

    [MenuItem("Tools/Generate Tag Enum")]
    public static void GenerateTagEnum()
    {
        string directory = Path.GetDirectoryName(ENUM_FILE_PATH);
        if (!Directory.Exists(directory))
        {
            Directory.CreateDirectory(directory);
        }

        string[] tags = UnityEditorInternal.InternalEditorUtility.tags;

        StringBuilder enumContent = new StringBuilder();
        enumContent.AppendLine("// This file was automatically generated by TagEnumGenerator");
        enumContent.AppendLine("// Do not modify this file - any changes will be overwritten");
        enumContent.AppendLine("using UnityEngine;");
        enumContent.AppendLine("");
        enumContent.AppendLine("public enum Tag");
        enumContent.AppendLine("{");

        for (int i = 0; i < tags.Length; i++)
        {
            string tag = tags[i];
            string sanitizedTag = SanitizeTagName(tag);
            enumContent.AppendLine($"   {sanitizedTag},");
        }

        enumContent.AppendLine("}");

        //extensions
        enumContent.AppendLine("");
        enumContent.AppendLine("public static class TagExtensions");
        enumContent.AppendLine("{");
        enumContent.AppendLine("    public static string ToTagString(this Tag tag)");
        enumContent.AppendLine("    {");
        enumContent.AppendLine("        switch (tag)");
        enumContent.AppendLine("        {");

        for (int i = 0; i < tags.Length; i++)
        {
            string tag = tags[i];
            string sanitizedTag = SanitizeTagName(tag);
            enumContent.AppendLine($"           case Tag.{sanitizedTag}:");
            enumContent.AppendLine($"               return \"{tag}\";");
        }

        enumContent.AppendLine("           default:");
        enumContent.AppendLine("               return string.Empty;");
        enumContent.AppendLine("        }");
        enumContent.AppendLine("    }");
        enumContent.AppendLine("");
        enumContent.AppendLine("    public static bool CompareTag(this GameObject gameObject, Tag tag)");
        enumContent.AppendLine("    {");
        enumContent.AppendLine("        return gameObject.CompareTag(tag.ToTagString());");
        enumContent.AppendLine("    }");
        enumContent.AppendLine("");
        enumContent.AppendLine("    public static void SetTag(this GameObject gameObject, Tag tag)");
        enumContent.AppendLine("    {");
        enumContent.AppendLine("        gameObject.tag = tag.ToTagString();");
        enumContent.AppendLine("    }");
        enumContent.AppendLine("}");

        File.WriteAllText(ENUM_FILE_PATH, enumContent.ToString());
        AssetDatabase.Refresh();

        Debug.Log($"Tag enum generated at {ENUM_FILE_PATH}");
    }

    private static string SanitizeTagName(string tagName)
    {
        string sanitized = System.Text.RegularExpressions.Regex.Replace(tagName, @"[^a-zA-Z0-9]", "_");

        if (char.IsDigit(sanitized[0]))
        {
            sanitized = "_" + sanitized;
        }

        return sanitized;
    }
}