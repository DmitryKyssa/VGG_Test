using System.IO;
using System.Linq;
using System.Text;
using UnityEditor;
using UnityEngine;

public class WeaponEnumGenerator
{
    private const string ENUM_FILE_PATH = "Assets/Scripts/Generated/WeaponsEnum.cs";

    [MenuItem("Tools/Generate Weapon Enum")]
    public static void GenerateWeaponEnum()
    {
        string directory = Path.GetDirectoryName(ENUM_FILE_PATH);
        if (!Directory.Exists(directory))
        {
            Directory.CreateDirectory(directory);
        }

        StringBuilder enumContent = new StringBuilder();
        enumContent.AppendLine("// This file was automatically generated by WeaponEnumGenerator");
        enumContent.AppendLine("// Do not modify this file - any changes will be overwritten");
        enumContent.AppendLine("using UnityEngine;");
        enumContent.AppendLine("");
        enumContent.AppendLine("public enum WeaponType");
        enumContent.AppendLine("{");

        string[] weaponTypes = Resources.LoadAll<WeaponData>("Weapons").Select(w => w.weaponName).ToArray();

        for (int i = 0; i < weaponTypes.Length; i++)
        {
            string weaponType = weaponTypes[i];
            string sanitizedWeaponType = SanitizeWeaponName(weaponType);
            enumContent.AppendLine($"   {sanitizedWeaponType},");
        }

        enumContent.AppendLine("}");
        enumContent.AppendLine("");

        enumContent.AppendLine("public static class WeaponTypeExtensions");
        enumContent.AppendLine("{");
        enumContent.AppendLine("   public static WeaponData GetWeaponData(this WeaponType weaponType)");
        enumContent.AppendLine("   {");
        enumContent.AppendLine("       switch (weaponType)");
        enumContent.AppendLine("       {");
        for (int i = 0; i < weaponTypes.Length; i++)
        {
            string weaponType = weaponTypes[i];
            string sanitizedWeaponType = SanitizeWeaponName(weaponType);
            enumContent.AppendLine($"           case WeaponType.{sanitizedWeaponType}:");
            enumContent.AppendLine($"               return Resources.Load<WeaponData>(\"Weapons/{weaponType}\");");
        }
        enumContent.AppendLine("           default:");
        enumContent.AppendLine("               Debug.LogError(\"Weapon not found: \" + weaponType);");
        enumContent.AppendLine("               return null;");
        enumContent.AppendLine("        }");
        enumContent.AppendLine("   }");
        enumContent.AppendLine("}");

        File.WriteAllText(ENUM_FILE_PATH, enumContent.ToString());
        AssetDatabase.Refresh();

        Debug.Log($"Weapon enum generated at {ENUM_FILE_PATH}");
    }

    private static string SanitizeWeaponName(string weaponName)
    {
        return weaponName.Replace(" ", "_").Replace("-", "_").Replace(".", "_");
    }
}