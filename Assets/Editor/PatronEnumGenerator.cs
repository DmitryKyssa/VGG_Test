using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using UnityEditor;
using UnityEngine;

public class PatronEnumGenerator
{
    private const string ENUM_FILE_PATH = "Assets/Scripts/Generated/PatronsEnum.cs";

    [MenuItem("Tools/Generate Patron Enum")]
    public static void GeneratePatronEnum()
    {
        string directory = Path.GetDirectoryName(ENUM_FILE_PATH);
        if (!Directory.Exists(directory))
        {
            Directory.CreateDirectory(directory);
        }

        StringBuilder enumContent = new StringBuilder();
        enumContent.AppendLine("// This file was automatically generated by PatronEnumGenerator");
        enumContent.AppendLine("// Do not modify this file - any changes will be overwritten");
        enumContent.AppendLine("using UnityEngine;");
        enumContent.AppendLine("");
        enumContent.AppendLine("public enum PatronType");
        enumContent.AppendLine("{");
        enumContent.AppendLine("   None,");
        string[] patronTypes = Resources.LoadAll<PatronData>("PatronsDatas").Select(p => p.patronName).ToArray();

        for (int i = 0; i < patronTypes.Length; i++)
        {
            enumContent.AppendLine($"   {patronTypes[i]},");
        }

        enumContent.AppendLine("}");
        enumContent.AppendLine("");
        enumContent.AppendLine("public static class PatronTypeExtensions");
        enumContent.AppendLine("{");
        enumContent.AppendLine("   public static PatronData GetPatronData(this PatronType patronType)");
        enumContent.AppendLine("   {");
        enumContent.AppendLine("       switch (patronType)");
        enumContent.AppendLine("       {");
        enumContent.AppendLine("           case PatronType.None:");
        enumContent.AppendLine("               return null;");

        for (int i = 0; i < patronTypes.Length; i++)
        {
            enumContent.AppendLine($"           case PatronType.{patronTypes[i]}:");
            enumContent.AppendLine($"               return Resources.Load<PatronData>(\"PatronsDatas/{patronTypes[i]}\");");
        }

        enumContent.AppendLine("           default:");
        enumContent.AppendLine("               Debug.LogError(\"Patron not found: \" + patronType);");
        enumContent.AppendLine("               return null;");
        enumContent.AppendLine("       }");
        enumContent.AppendLine("   }");
        enumContent.AppendLine("}");

        File.WriteAllText(ENUM_FILE_PATH, enumContent.ToString());
        AssetDatabase.Refresh();
    }
}